import cv2
import mediapipe as mp
import pyautogui

cam = cv2.VideoCapture(0)
face_mesh = mp.solutions.face_mesh.FaceMesh(refine_landmarks=True)
screen_w, screen_h = pyautogui.size()

# Adjust sensitivity
sensitivity = 1.5

# Safe margin from screen edges to prevent triggering fail-safe
safe_margin = 20

while True:
    _, frame = cam.read()
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    output = face_mesh.process(rgb_frame)
    landmark_points = output.multi_face_landmarks
    frame_h, frame_w, _ = frame.shape

    if landmark_points:
        landmarks = landmark_points[0].landmark
        pupil = landmarks[468]
        x = int(pupil.x * frame_w)
        y = int(pupil.y * frame_h)
        cv2.circle(frame, (x, y), 3, (0, 255, 0), -1)
        screen_x = screen_w / frame_w * x * sensitivity
        screen_y = screen_h / frame_h * y * sensitivity

        # Print the coordinates to debug
        print(f'Screen X: {screen_x}, Screen Y: {screen_y}')

        # Ensure screen coordinates are within the safe margins
        if safe_margin < screen_x < screen_w - safe_margin and safe_margin < screen_y < screen_h - safe_margin:
            pyautogui.moveTo(screen_x, screen_y)

        left_eye = [landmarks[145], landmarks[159]]
        right_eye = [landmarks[374], landmarks[386]]

        for landmark in left_eye:
            x = int(landmark.x * frame_w)
            y = int(landmark.y * frame_h)
            cv2.circle(frame, (x, y), 3, (255, 0, 255), -1)
        if abs(left_eye[0].y - left_eye[1].y) < 0.004:
            pyautogui.click()
            pyautogui.sleep(0)

        for landmark in right_eye:
            x = int(landmark.x * frame_w)
            y = int(landmark.y * frame_h)
            cv2.circle(frame, (x, y), 3, (255, 0, 255), -1)
        if abs(right_eye[0].y - right_eye[1].y) < 0.004:
            pyautogui.click()
            pyautogui.sleep(0)

    cv2.imshow('Eye Controlled Mouse', frame)
    cv2.waitKey(1)
